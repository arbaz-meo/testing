// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AcceptedNFT extends ethereum.Event {
  get params(): AcceptedNFT__Params {
    return new AcceptedNFT__Params(this);
  }
}

export class AcceptedNFT__Params {
  _event: AcceptedNFT;

  constructor(event: AcceptedNFT) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get payToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get offerPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get offerer(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get nftOwner(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class BoughtNFT extends ethereum.Event {
  get params(): BoughtNFT__Params {
    return new BoughtNFT__Params(this);
  }
}

export class BoughtNFT__Params {
  _event: BoughtNFT;

  constructor(event: BoughtNFT) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get payToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class CanceledOfferredNFT extends ethereum.Event {
  get params(): CanceledOfferredNFT__Params {
    return new CanceledOfferredNFT__Params(this);
  }
}

export class CanceledOfferredNFT__Params {
  _event: CanceledOfferredNFT;

  constructor(event: CanceledOfferredNFT) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get payToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get offerPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get offerer(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class CreatedAuction extends ethereum.Event {
  get params(): CreatedAuction__Params {
    return new CreatedAuction__Params(this);
  }
}

export class CreatedAuction__Params {
  _event: CreatedAuction;

  constructor(event: CreatedAuction) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get payToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get minBid(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[7].value.toAddress();
  }
}

export class ListedNFT extends ethereum.Event {
  get params(): ListedNFT__Params {
    return new ListedNFT__Params(this);
  }
}

export class ListedNFT__Params {
  _event: ListedNFT;

  constructor(event: ListedNFT) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get payToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class OfferredNFT extends ethereum.Event {
  get params(): OfferredNFT__Params {
    return new OfferredNFT__Params(this);
  }
}

export class OfferredNFT__Params {
  _event: OfferredNFT;

  constructor(event: OfferredNFT) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get payToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get offerPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get offerer(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PlacedBid extends ethereum.Event {
  get params(): PlacedBid__Params {
    return new PlacedBid__Params(this);
  }
}

export class PlacedBid__Params {
  _event: PlacedBid;

  constructor(event: PlacedBid) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get payToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get bidPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get bidder(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class ResultedAuction extends ethereum.Event {
  get params(): ResultedAuction__Params {
    return new ResultedAuction__Params(this);
  }
}

export class ResultedAuction__Params {
  _event: ResultedAuction;

  constructor(event: ResultedAuction) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get winner(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get caller(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class market__getListedNFTResultValue0Struct extends ethereum.Tuple {
  get nft(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get seller(): Address {
    return this[2].toAddress();
  }

  get payToken(): Address {
    return this[3].toAddress();
  }

  get price(): BigInt {
    return this[4].toBigInt();
  }

  get sold(): boolean {
    return this[5].toBoolean();
  }
}

export class market extends ethereum.SmartContract {
  static bind(address: Address): market {
    return new market("market", address);
  }

  calculateRoyalty(_royalty: BigInt, _price: BigInt): BigInt {
    let result = super.call(
      "calculateRoyalty",
      "calculateRoyalty(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_royalty),
        ethereum.Value.fromUnsignedBigInt(_price)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateRoyalty(
    _royalty: BigInt,
    _price: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateRoyalty",
      "calculateRoyalty(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_royalty),
        ethereum.Value.fromUnsignedBigInt(_price)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkIsPayableToken(_payableToken: Address): boolean {
    let result = super.call(
      "checkIsPayableToken",
      "checkIsPayableToken(address):(bool)",
      [ethereum.Value.fromAddress(_payableToken)]
    );

    return result[0].toBoolean();
  }

  try_checkIsPayableToken(
    _payableToken: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkIsPayableToken",
      "checkIsPayableToken(address):(bool)",
      [ethereum.Value.fromAddress(_payableToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getListedNFT(
    _nft: Address,
    _tokenId: BigInt
  ): market__getListedNFTResultValue0Struct {
    let result = super.call(
      "getListedNFT",
      "getListedNFT(address,uint256):((address,uint256,address,address,uint256,bool))",
      [
        ethereum.Value.fromAddress(_nft),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return changetype<market__getListedNFTResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getListedNFT(
    _nft: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<market__getListedNFTResultValue0Struct> {
    let result = super.tryCall(
      "getListedNFT",
      "getListedNFT(address,uint256):((address,uint256,address,address,uint256,bool))",
      [
        ethereum.Value.fromAddress(_nft),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<market__getListedNFTResultValue0Struct>(value[0].toTuple())
    );
  }

  getPayableTokens(): Array<Address> {
    let result = super.call(
      "getPayableTokens",
      "getPayableTokens():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getPayableTokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getPayableTokens",
      "getPayableTokens():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _MyWhooshNFTFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOfferNFTCall extends ethereum.Call {
  get inputs(): AcceptOfferNFTCall__Inputs {
    return new AcceptOfferNFTCall__Inputs(this);
  }

  get outputs(): AcceptOfferNFTCall__Outputs {
    return new AcceptOfferNFTCall__Outputs(this);
  }
}

export class AcceptOfferNFTCall__Inputs {
  _call: AcceptOfferNFTCall;

  constructor(call: AcceptOfferNFTCall) {
    this._call = call;
  }

  get _nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _offerer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AcceptOfferNFTCall__Outputs {
  _call: AcceptOfferNFTCall;

  constructor(call: AcceptOfferNFTCall) {
    this._call = call;
  }
}

export class AddPayableTokenCall extends ethereum.Call {
  get inputs(): AddPayableTokenCall__Inputs {
    return new AddPayableTokenCall__Inputs(this);
  }

  get outputs(): AddPayableTokenCall__Outputs {
    return new AddPayableTokenCall__Outputs(this);
  }
}

export class AddPayableTokenCall__Inputs {
  _call: AddPayableTokenCall;

  constructor(call: AddPayableTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddPayableTokenCall__Outputs {
  _call: AddPayableTokenCall;

  constructor(call: AddPayableTokenCall) {
    this._call = call;
  }
}

export class BidPlaceCall extends ethereum.Call {
  get inputs(): BidPlaceCall__Inputs {
    return new BidPlaceCall__Inputs(this);
  }

  get outputs(): BidPlaceCall__Outputs {
    return new BidPlaceCall__Outputs(this);
  }
}

export class BidPlaceCall__Inputs {
  _call: BidPlaceCall;

  constructor(call: BidPlaceCall) {
    this._call = call;
  }

  get _nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _bidPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BidPlaceCall__Outputs {
  _call: BidPlaceCall;

  constructor(call: BidPlaceCall) {
    this._call = call;
  }
}

export class BuyNFTCall extends ethereum.Call {
  get inputs(): BuyNFTCall__Inputs {
    return new BuyNFTCall__Inputs(this);
  }

  get outputs(): BuyNFTCall__Outputs {
    return new BuyNFTCall__Outputs(this);
  }
}

export class BuyNFTCall__Inputs {
  _call: BuyNFTCall;

  constructor(call: BuyNFTCall) {
    this._call = call;
  }

  get _nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _payToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _price(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class BuyNFTCall__Outputs {
  _call: BuyNFTCall;

  constructor(call: BuyNFTCall) {
    this._call = call;
  }
}

export class CancelAuctionCall extends ethereum.Call {
  get inputs(): CancelAuctionCall__Inputs {
    return new CancelAuctionCall__Inputs(this);
  }

  get outputs(): CancelAuctionCall__Outputs {
    return new CancelAuctionCall__Outputs(this);
  }
}

export class CancelAuctionCall__Inputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }

  get _nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelAuctionCall__Outputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }
}

export class CancelListedNFTCall extends ethereum.Call {
  get inputs(): CancelListedNFTCall__Inputs {
    return new CancelListedNFTCall__Inputs(this);
  }

  get outputs(): CancelListedNFTCall__Outputs {
    return new CancelListedNFTCall__Outputs(this);
  }
}

export class CancelListedNFTCall__Inputs {
  _call: CancelListedNFTCall;

  constructor(call: CancelListedNFTCall) {
    this._call = call;
  }

  get _nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelListedNFTCall__Outputs {
  _call: CancelListedNFTCall;

  constructor(call: CancelListedNFTCall) {
    this._call = call;
  }
}

export class CancelOfferNFTCall extends ethereum.Call {
  get inputs(): CancelOfferNFTCall__Inputs {
    return new CancelOfferNFTCall__Inputs(this);
  }

  get outputs(): CancelOfferNFTCall__Outputs {
    return new CancelOfferNFTCall__Outputs(this);
  }
}

export class CancelOfferNFTCall__Inputs {
  _call: CancelOfferNFTCall;

  constructor(call: CancelOfferNFTCall) {
    this._call = call;
  }

  get _nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelOfferNFTCall__Outputs {
  _call: CancelOfferNFTCall;

  constructor(call: CancelOfferNFTCall) {
    this._call = call;
  }
}

export class CreateAuctionCall extends ethereum.Call {
  get inputs(): CreateAuctionCall__Inputs {
    return new CreateAuctionCall__Inputs(this);
  }

  get outputs(): CreateAuctionCall__Outputs {
    return new CreateAuctionCall__Outputs(this);
  }
}

export class CreateAuctionCall__Inputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }

  get _nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _payToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _price(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _minBid(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _startTime(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _endTime(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class CreateAuctionCall__Outputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }
}

export class ListNftCall extends ethereum.Call {
  get inputs(): ListNftCall__Inputs {
    return new ListNftCall__Inputs(this);
  }

  get outputs(): ListNftCall__Outputs {
    return new ListNftCall__Outputs(this);
  }
}

export class ListNftCall__Inputs {
  _call: ListNftCall;

  constructor(call: ListNftCall) {
    this._call = call;
  }

  get _nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _payToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _price(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ListNftCall__Outputs {
  _call: ListNftCall;

  constructor(call: ListNftCall) {
    this._call = call;
  }
}

export class OfferNFTCall extends ethereum.Call {
  get inputs(): OfferNFTCall__Inputs {
    return new OfferNFTCall__Inputs(this);
  }

  get outputs(): OfferNFTCall__Outputs {
    return new OfferNFTCall__Outputs(this);
  }
}

export class OfferNFTCall__Inputs {
  _call: OfferNFTCall;

  constructor(call: OfferNFTCall) {
    this._call = call;
  }

  get _nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _payToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _offerPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class OfferNFTCall__Outputs {
  _call: OfferNFTCall;

  constructor(call: OfferNFTCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ResultAuctionCall extends ethereum.Call {
  get inputs(): ResultAuctionCall__Inputs {
    return new ResultAuctionCall__Inputs(this);
  }

  get outputs(): ResultAuctionCall__Outputs {
    return new ResultAuctionCall__Outputs(this);
  }
}

export class ResultAuctionCall__Inputs {
  _call: ResultAuctionCall;

  constructor(call: ResultAuctionCall) {
    this._call = call;
  }

  get _nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ResultAuctionCall__Outputs {
  _call: ResultAuctionCall;

  constructor(call: ResultAuctionCall) {
    this._call = call;
  }
}

export class RoyaltyWithdrawCall extends ethereum.Call {
  get inputs(): RoyaltyWithdrawCall__Inputs {
    return new RoyaltyWithdrawCall__Inputs(this);
  }

  get outputs(): RoyaltyWithdrawCall__Outputs {
    return new RoyaltyWithdrawCall__Outputs(this);
  }
}

export class RoyaltyWithdrawCall__Inputs {
  _call: RoyaltyWithdrawCall;

  constructor(call: RoyaltyWithdrawCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RoyaltyWithdrawCall__Outputs {
  _call: RoyaltyWithdrawCall;

  constructor(call: RoyaltyWithdrawCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
